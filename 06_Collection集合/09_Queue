## Queue

### 定义

1. 队列 (Queue) 是一种经常使用的集合, Queue 实际上是一个先进先出 (FIFO) 的有序表, 它 和 List 的区别在于, List 可以在任意位置添加和删除元素, 而 Queue 只有两个操作
   - 把元素添加到队列末尾
   - 从队列头部取出元素
2. 比如: 超市的收银台就是一个队列 (先排队, 先买单)
3. 队列 Queue 是一个接口



### 操作Queue

1. 队列**接口**`Queue`定义了以下几个方法：

   - `int size()`：获取队列长度；
   - `boolean add(E)`/`boolean offer(E)`：添加元素到队尾；
   - `E remove()`/`E poll()`：获取队首元素并从队列中删除；
   - `E element()`/`E peek()`：获取队首元素但并不从队列中删除。

2. 两套方法可以根据需要来选择使用。

   注意：不要把`null`添加到队列中，否则`poll()`方法返回`null`时，很难确定是取到了`null`元素还是队列为空。



### demo: 

1. `LinkedList`即实现了`List`接口，又实现了`Queue`接口, 我们使用 LinkedList 实现类测试一下 Queue 接口操作方法吧

   ```java
   public static void main(String[] args) {
       Queue<String> q = new LinkedList<>();
       //添加元素
       System.out.println(((LinkedList<String>) q).add("AppleOne"));//true
       System.out.println(((LinkedList<String>) q).offer("AppleTwo"));//true
       System.out.println(((LinkedList<String>) q).offer("AppleThree"));//true
       System.out.println(((LinkedList<String>) q).offer("AppleFour"));//true
       //取出元素并删除
       System.out.println(q.remove());
       System.out.println(q.poll());
       //取出元素不删除
       System.out.println(q.element());//
       System.out.println(q.peek());//反复获取
       System.out.println(q);
       System.out.println(q.size());//获取长度
   }
   ```



###### 完 ~